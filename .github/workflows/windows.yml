name: Windows
on:
  # push代码时触发workflow
  push:
    branches:
      - master
      - main
    tags:
      - "*"
    # 忽略README.md
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'Doxyfile.in'
      - '.clang-format'
      - '.git*'
      - '.github/workflows/ubuntu.yml'
      - '.github/workflows/macos.yml'
  # pull_request时触发workflow
  pull_request:
    paths-ignore:
    - '*.md'
    - 'LICENSE'
    - 'Doxyfile.in'
    - '.clang-format'
    - '.git*'
    - '.github/workflows/ubuntu.yml'
    - '.github/workflows/macos.yml'
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019 
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{ matrix.os }}
    strategy:
      # 矩阵配置
      matrix:
        build_type: [Release]
        os: [windows-2019]
        qt_ver: [5.15.2,6.3.0]
        qt_arch: [win64_msvc2019_64]
        msvc_arch: [x64]
        qt_arch_install: [msvc2019_64]
        include:         
          - qt_ver: 6.3.0
            modules: "qt5compat"
    env:
      targetName: exedemo.exe
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      build_type: Release
    # 步骤
    steps:
      # 拉取代码
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      # 安装Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          modules: ${{ matrix.modules }}

      - name: Setup VS tools (Windows)
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64
       
      - name: Configure (${{ matrix.configuration }})
        run: cmake -S . -Bbuild -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      - name: Build 
        run: cmake --build build --config ${{ matrix.build_type }}

      # msvc编译
      - name: msvc-build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%

      # 打包 
      - name: package
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}          
        shell: pwsh
        # 记录packageName给后续step
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
           $name = ${env:archiveName}
           echo "::set-output name=packageName::$name"   

      # tag 查询github-Release
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}

      # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true 